# array je pole ze ktere se berou prvky
# m je maximalni vaha
# i je aktulne zvazovana vec
go(array,m,i,val) {

    # pokud je pocet polozek mensi nez 0
    # nebo nosnost batohu je mensi nez 0
    # tak skonci
    if (m <= 0) {
        return nil
    }

    if (i < 0) {
        ret = [0,0]
        ret[0] = alloc(sizeof(array))
        ret[1] = [0,0]      # suma vah a suma cen
        return ret
    }

    # zkus variantu bez a variantu s 
    
    # u varianty s to preposli s vyssi cenou, ale nizsi nosnosti   
    with = go(array, m - array[i][0], i-1, val + array[i][1])

    # u varianty bez uber pocet veci, 
    # ale nosnost a hodnotu nech stejne
    without = go(array, m, i-1, val)
    
    # hloubka obou vetvi je stejna,
    # takze to staci testovat na jedne
    if (with != nil) {  
        with_w = with[1][1] + array[i][1]
        without_w = without[1][1]
        if (without_w < with_w) {
            with[0][i] = 1
            with[1][0] = with[1][0] + array[i][0]
            with[1][1] = with[1][1] + array[i][1]
            return with
        }
    }

    # jinak to dej do without
    without[0][i] = 0
    return without
}

main {

    # WI = 0
    # CI = 1

    file = openFile("testfile",0)

    id = readNumber(file) 
    count = readNumber(file) 
    max_w = readNumber(file) 

    # alokuj si pole
    a = alloc(count)

    # read things
    for (i = 0; i < count; i = i + 1) {
        w = readNumber(file)
        c = readNumber(file)
        a[i] = [w,c]
    }

    closeFile(file)
   
    result = go(a,max_w,count-1,0)
    print(result)

    return 1
}
