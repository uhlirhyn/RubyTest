

ENV
=========================================================

Struktura je jako asociativni pole (zprostredkovava Ruby)

    +-----+-----------------+
    | ID  |   obsah         |
    +-----+-----------------+
    +-----+-----------------+
    | "a" |   48.25         |   
    +-----+-----------------+
    | "b" |   "ahoj, text"  |   
    +-----+-----------------+

Ke kazdemu identifikatoru je pridelena jeho hodnota, tou
muze byt primo cislo nebo retezec, ale take pole, 


     abc[0]     ... vezme obsah promenne "a" - OK
                    -> Ruby vrati vlastne referenci na pole
                ... na tomto obsahu provede dalsi dereferenci
                    -> Ruby vrati dalsi vec ...
     abc[0][5]

     ... Ruby se postara o adresovani - pointery

Scope
------

Dokud se cte, je to lehke - proste se projde hiearchie 
env od listu po koren a po ceste se pta na vyskyt daneho 
identifikatoru - pokud se najde, konci se prochod a vraci 
se asociovany obsah. 

V momente kdy chci ale zapisovat (v jazyce kde neni deklarace
a promenne jsou deklarovany automaticky) je potreba resit 
problemy typu zastineni nebo prorazeni - viz.:

    a = 5           # a -> ENV1

    funkce1 arg1 {  # vytvori se ENV2
        b = 9       # b -> ENV2
        a = 8       # ?? ENV1.a = 8
                    # nebo a -> ENV2
    }

Aby byly funkce zcela slepe a nevidely ven, to se mi zda
nesikovne, konec koncu pro rekurzi by to bylo vlastne zcela 
fatalni (ackoliv ... promenne a funkce jsou brany zvlast).

Na druhou stranu kdyz si budu chtit deklarovat svoji novou 
promennou, tak si nemuzu byt vzdycky jisty tim, ze neprepisuju
venkovni ... to pak ENV ztraci smysl 

Existujici moznosti:
    
    Java-like
        - zavest deklarace ...

    BASH-like
        - jeden scope vladne vsem ?

    Ruby-like
        - funkce ven nevidi, vidi 
          pouze na @ a @@ promenne 

Vlastni alternativa

    - fce by videla do env, kde je definovana
    - vychozi chovani pri prirazeni by bylo 
      najit existujici promennou v hiearchii
    - syntaxe by povolovala "deklaracni" 
      prirazeni 

     a = 5           # a -> ENV1

     funkce1 arg1 {  # vytvori se ENV2
         b = 9       # b -> ENV2
         a = 8       # ENV1.a = 8
         a Ł= 10     # a -> ENV2
         a = 3       # ENV2.a = 3
     }

Jak je videt, lze si tak vynutit zapis do 
lokalniho ENV ... problem nicmene nastava v tom,
ze jsem prave ztratil jakoukoliv moznost manipulace
s tim starym 'a' ... 

To by slo vyresit obdobne - opet pomoci znaku Ł, ale 
tentokrat umisteneho jinak

      a = 5           # a -> ENV1

      funkce1 arg1 {  # vytvori se ENV2
          b = 9       # b -> ENV2
          a = 8       # ENV1.a = 8
          a Ł= 10     # a -> ENV2
          a = 3       # ENV2.a = 3
          Ła = 2      # ENV1.a = 2
      }

Otazkou zustava "ekonomicnost" tohoto reseni ...
- je to funkcni
- protoze jako vychozi operace je koukat se do hiearchie
  a nedeklarovat automaticky promenou v lokalnim ENV je 
  to i na pouzivani intuitivni

No, problem je tu nakonec jeste jeden - jak je v kodu 
videt, deklarace 

        a Ł= 10

vlastne zaklada stav funkce, protoze prorazeni 

        a = 8

a prirazeni 

        a = 3

maji najednou jiny vyznam ... to neni dobre 
napada mne dalsi moznost - vsechny prirazeni bez Ł se tykaji 
proste lokalnich promennych ... a vsechno s Ł se tyka ENV
nadrazeneho bloku.
